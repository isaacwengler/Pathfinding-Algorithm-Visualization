{"version":3,"sources":["Pathfinder/Grid/GridBox.jsx","Pathfinder/Algorithms/dijkstras.js","Pathfinder/Grid/dropdown.jsx","Pathfinder/Pathfinder.jsx","App.js","index.js"],"names":["GridBox","this","props","row","col","start","finish","wall","onMouseDown","onMouseEnter","onMouseUp","extraClass","id","className","Component","updateGrid","box","grid","visited","distance","previous","length","shortestPath","BoxesInOrder","currentBox","path","unshift","algorithms","key","text","value","DropdownExampleSelection","Dropdown","placeholder","fluid","selection","options","startRow","startCol","finishRow","finishCol","carryStart","carryFinish","running","Pathfinder","state","clicking","setState","getGrid","clearVisited","updateWall","updateStart","updateFinish","clearW","algorithm","boxesVisited","visitedBoxes","unvisitedBoxes","boxes","i","j","push","getAllBoxes","sort","a","b","closestBox","shift","Infinity","dijkstras","console","log","setTimeout","document","getElementById","href","onClick","clearPath","clearWalls","visualize","map","rowIndex","boxIndex","mouseDown","mouseEnter","mouseUp","currRow","makeBox","newGrid","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1520fa7d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './GridBox.css'\n\nexport default class GridBox extends Component {\n    render() {\n        const {\n            row,\n            col,\n            start,\n            finish,\n            wall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n        } = this.props;\n\n        const extraClass = finish ? 'finish'\n            : start ? 'start'\n            : wall ? 'wall'\n            : '';\n\n        return (\n            <div\n                id={`box:${row},${col}`}\n                className={`box ${extraClass}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></div>\n        );\n    }\n}","export function dijkstras(grid, start, finish) {\n    const visitedBoxes = [];\n    grid[start.row][start.col].distance = 0;\n    const unvisitedBoxes = getAllBoxes(grid);\n    while (unvisitedBoxes.length !== 0) {\n        unvisitedBoxes.sort((a, b) => a.distance - b.distance);\n        let closestBox = unvisitedBoxes.shift();\n        if (closestBox.distance === Infinity) return visitedBoxes;\n\n        \n        visitedBoxes.push(closestBox);\n        closestBox.visited = true;\n        if (closestBox === finish) return visitedBoxes;\n        grid = updateGrid(closestBox, grid);\n    }\n}\n\nfunction updateGrid(box, grid) {\n    const {col, row} = box;\n\n    if (row > 0 && !grid[row-1][col].wall && !grid[row-1][col].visited) {\n        grid[row-1][col].distance = box.distance + 3;\n        grid[row-1][col].previous = box;\n    }\n    if (row < grid.length - 1 && !grid[row+1][col].wall && !grid[row+1][col].visited) {\n        grid[row+1][col].distance = box.distance + 3;\n        grid[row+1][col].previous = box;\n    }\n    if (col > 0 && !grid[row][col-1].wall && !grid[row][col-1].visited) {\n        grid[row][col-1].distance = box.distance + 3;\n        grid[row][col-1].previous = box;\n    }\n    if (col < grid[0].length-1 && !grid[row][col+1].wall && !grid[row][col+1].visited) {\n        grid[row][col+1].distance = box.distance + 3;\n        grid[row][col+1].previous = box;\n    }\n    return grid;\n    \n}\n\n\nfunction getAllBoxes(grid) {\n    let boxes = [];\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            boxes.push(grid[i][j]);\n        }\n    }\n    return boxes;\n}\n\nexport function shortestPath(finish) {\n    const BoxesInOrder = [];\n    let currentBox = finish;\n    while(currentBox !== null) {\n        currentBox.path = true;\n        BoxesInOrder.unshift(currentBox);\n        currentBox = currentBox.previous;\n    }\n    return BoxesInOrder;\n}","import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst algorithms = [\n  {\n    key: 'Dijkstras Algorithm',\n    text: 'Dijkstras Algorithm',\n    value: 'Dijkstras Algorithm',\n  },\n  {\n    key: 'A* Algorithm',\n    text: 'A* Algorithm',\n    value: 'A* Algorithm',\n  },\n  {\n    key: 'Best-First-Search Algorithm',\n    text: 'Best-First-Search Algorithm',\n    value: 'Best-First-Search Algorithm',\n  }\n]\n\nexport const DropdownExampleSelection = () => {\n    return (\n        <Dropdown\n            placeholder='Pick an algorithm!'\n            fluid\n            selection\n            options={algorithms}\n            \n        />\n    )\n}\n\n","import React, { Component } from 'react';\nimport GridBox from './Grid/GridBox';\nimport {dijkstras, shortestPath} from './Algorithms/dijkstras'\nimport { DropdownExampleSelection } from './Grid/dropdown'\n\nimport './Pathfinder.css';\n\nlet startRow = 10;\nlet startCol = 5;\nlet finishRow = 10;\nlet finishCol = 44;\nlet carryStart = false;\nlet carryFinish = false;\nlet running = false\n\n\nexport default class Pathfinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            clicking: false,\n        };\n    }\n    \n    componentDidMount() {\n        this.setState({grid: getGrid()});\n    }\n        \n    mouseDown(row, col) {\n        if (!running) {\n            this.setState({clicking: true});\n            if (row === startRow && col === startCol) {\n                this.setState({grid: clearVisited(this.state.grid)});\n                carryStart = true;\n                return;\n            }\n            if (row === finishRow && col === finishCol) {\n                this.setState({grid: clearVisited(this.state.grid)});\n                carryFinish = true;\n                return;\n            }\n            this.setState({grid: updateWall(this.state.grid, row, col)});\n        }\n    }\n\n    mouseEnter(row, col) {\n        if (this.state.clicking) {\n            if(carryStart) {\n                this.setState({grid: updateStart(this.state.grid, row, col)});\n                this.setState({grid: updateFinish(this.state.grid, finishRow, finishCol)});\n                return;\n            }\n            if(carryFinish) {\n                this.setState({grid: updateFinish(this.state.grid, row, col)});\n                return;\n            }\n            this.setState({grid: updateWall(this.state.grid, row, col)});\n        }\n    }\n\n    mouseUp() {\n        this.setState({clicking: false});\n        carryStart = false;\n        carryFinish = false;\n    }\n\n    clearWalls() {\n        if (!running) {\n            this.setState({grid: clearW(this.state.grid)});\n        }\n    }\n\n    clearPath() {\n        if (!running) {\n            this.setState({grid: clearVisited(this.state.grid)});\n        }\n    }\n\n    visualize(algorithm) {\n        if(running) return;\n        running = true;\n        this.setState({grid: clearVisited(this.state.grid)});\n        if (algorithm === 'dijkstras') {\n            const boxesVisited = dijkstras(this.state.grid, this.state.grid[startRow][startCol], this.state.grid[finishRow][finishCol]);\n            console.log(startRow, startCol);\n            for (let i = 1; i < boxesVisited.length-1; i++) {\n                console.log(boxesVisited[i]);\n                setTimeout(() => {\n                    document.getElementById(`box:${boxesVisited[i].row},${boxesVisited[i].col}`).className = 'box visited';\n                }, 10 * i)\n                if(i === boxesVisited.length-2) {\n                    const path = shortestPath(this.state.grid[finishRow][finishCol]);\n                    for (let j = 1; j < path.length-1; j++) {\n                      setTimeout(() => {\n                        document.getElementById(`box:${path[j].row},${path[j].col}`).className = 'box path';\n                        }, boxesVisited.length * 10 + 30 * j)\n                    }\n                }\n            }\n            setTimeout(() => {\n                running = false;\n                }, boxesVisited.length * 10 + 30 * shortestPath.length)\n        }\n    }\n\n    render(){\n        return (\n            <div>\n                <div className=\"header\">\n                    <div className=\"header-container\">\n                        <a href=\".grid\">Pathfinding Algorithm Visualization</a>\n\n                        <button className=\"btn\" onClick={() => this.clearPath()}>\n                            Clear Path\n                        </button>\n                        <button className=\"btn\" onClick={() => this.clearWalls()}>\n                            Clear Walls\n                        </button>\n                        <button className=\"btn\" onClick={() => this.visualize('dijkstras')}>\n                            Visualize Algorithm!\n                        </button>   \n                        <DropdownExampleSelection />\n                    </div>\n                    \n                </div>\n\n                <div className=\"grid-container\">\n                    <div className=\"grid\">\n                        {this.state.grid.map((row, rowIndex) => {\n                            return (\n                                <div key={rowIndex}>\n                                    {row.map((box, boxIndex) => {\n                                        const {row, col, finish, start, wall} = box;\n                                        return (\n                                            <GridBox \n                                                key={boxIndex}\n                                                row={row}\n                                                col={col}\n                                                start={start}\n                                                finish={finish}\n                                                wall={wall}\n                                                onMouseDown={() => this.mouseDown(row, col)}\n                                                onMouseEnter={() => this.mouseEnter(row, col)}\n                                                onMouseUp={() => this.mouseUp()}\n                                            ></GridBox>\n                                        );\n                                    }\n                                    )}\n                                </div>\n                            );\n                        }\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst getGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 30; row++) {\n        const currRow = [];\n        for (let col = 0; col < 50; col++){\n            currRow.push(makeBox(col, row));\n        }\n        grid.push(currRow)\n    }\n    return grid;\n};\n\n\n\nconst makeBox = (col, row) => {\n    return {\n        col,\n        row,\n        start: row === startRow && col === startCol,\n        finish: row === finishRow && col === finishCol,\n        distance: Infinity,\n        previous: null,\n        wall: false,\n        visited: false,\n        path: false,\n    };\n};\n\nconst updateWall = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[row][col].wall = !newGrid[row][col].wall;\n    return newGrid;\n};\n\nconst updateStart = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[startRow][startCol].start = false;\n    newGrid[row][col].start = true;\n    startRow = row;\n    startCol = col;\n    return newGrid;\n};\n\nconst updateFinish = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[finishRow][finishCol].finish = false;\n    newGrid[row][col].finish = true;\n    finishRow = row;\n    finishCol = col;\n    return newGrid;\n};\n\nconst clearW = (grid) => {\n    const newGrid = grid;\n    for (let row = 0; row < 30; row++) {\n        for (let col = 0; col < 50; col++){\n            newGrid[row][col].wall = false;\n        }\n    }\n    return newGrid;\n}\n\nconst clearVisited = (grid) => {\n    const newGrid = grid;\n    for (let row = 0; row < 30; row++) {\n        for (let col = 0; col < 50; col++){\n            newGrid[row][col].previous = null;\n            newGrid[row][col].distance = Infinity;\n            newGrid[row][col].visited = false;\n            newGrid[row][col].path = false;\n            if (document.getElementById(`box:${grid[row][col].row},${grid[row][col].col}`).className === 'box visited' || document.getElementById(`box:${grid[row][col].row},${grid[row][col].col}`).className === 'box path') {\n                document.getElementById(`box:${newGrid[row][col].row},${newGrid[row][col].col}`).className = 'box';\n            } \n            \n        }\n    }\n    console.log(newGrid);\n    return newGrid;\n}\n\n","import './App.css';\nimport Pathfinder from './Pathfinder/Pathfinder'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Pathfinder />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}