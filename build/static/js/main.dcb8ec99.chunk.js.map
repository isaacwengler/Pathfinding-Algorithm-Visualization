{"version":3,"sources":["Pathfinder/Grid/GridBox.jsx","Pathfinder/Algorithms/dijkstras.js","Pathfinder/Algorithms/aStar.js","Pathfinder/Algorithms/bfs.js","Pathfinder/Pathfinder.jsx","App.js","index.js"],"names":["GridBox","this","props","row","col","start","finish","wall","onMouseDown","onMouseEnter","onMouseUp","extraClass","id","className","Component","updateGrid","box","grid","visited","distance","previous","length","shortestPath","BoxesInOrder","currentBox","path","unshift","hValue","gValue","Math","abs","moves","startRow","startCol","finishRow","finishCol","carryStart","carryFinish","running","Pathfinder","state","clicking","setState","getGrid","clearVisited","updateWall","updateStart","updateFinish","clearW","algorithm","boxesVisited","visitedBoxes","unvisitedBoxes","boxes","i","j","push","getAllBoxes","sort","a","b","closestBox","shift","Infinity","dijkstras","aStar","bfs","console","log","setTimeout","document","getElementById","onClick","clearPath","clearWalls","visualize","map","rowIndex","boxIndex","mouseDown","mouseEnter","mouseUp","currRow","makeBox","newGrid","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dcb8ec99.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './GridBox.css'\n\nexport default class GridBox extends Component {\n    render() {\n        const {\n            row,\n            col,\n            start,\n            finish,\n            wall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n        } = this.props;\n\n        const extraClass = finish ? 'finish'\n            : start ? 'start'\n            : wall ? 'wall'\n            : '';\n\n        return (\n            <div\n                id={`box:${row},${col}`}\n                className={`box ${extraClass}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></div>\n        );\n    }\n}","export function dijkstras(grid, start, finish) {\n    const visitedBoxes = [];\n    grid[start.row][start.col].distance = 0;\n    const unvisitedBoxes = getAllBoxes(grid);\n    while (unvisitedBoxes.length !== 0) {\n        unvisitedBoxes.sort((a, b) => a.distance - b.distance);\n        let closestBox = unvisitedBoxes.shift();\n        if (closestBox.distance === Infinity) return visitedBoxes;\n\n        \n        visitedBoxes.push(closestBox);\n        closestBox.visited = true;\n        if (closestBox === finish) return visitedBoxes;\n        grid = updateGrid(closestBox, grid);\n    }\n}\n\nfunction updateGrid(box, grid) {\n    const {col, row} = box;\n\n    if (row > 0 && !grid[row-1][col].wall && !grid[row-1][col].visited) {\n        grid[row-1][col].distance = box.distance + 3;\n        grid[row-1][col].previous = box;\n    }\n    if (row < grid.length - 1 && !grid[row+1][col].wall && !grid[row+1][col].visited) {\n        grid[row+1][col].distance = box.distance + 3;\n        grid[row+1][col].previous = box;\n    }\n    if (col > 0 && !grid[row][col-1].wall && !grid[row][col-1].visited) {\n        grid[row][col-1].distance = box.distance + 3;\n        grid[row][col-1].previous = box;\n    }\n    if (col < grid[0].length-1 && !grid[row][col+1].wall && !grid[row][col+1].visited) {\n        grid[row][col+1].distance = box.distance + 3;\n        grid[row][col+1].previous = box;\n    }\n    return grid;\n    \n}\n\n\nfunction getAllBoxes(grid) {\n    let boxes = [];\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            boxes.push(grid[i][j]);\n        }\n    }\n    return boxes;\n}\n\nexport function shortestPath(finish) {\n    const BoxesInOrder = [];\n    let currentBox = finish;\n    while(currentBox !== null) {\n        currentBox.path = true;\n        BoxesInOrder.unshift(currentBox);\n        currentBox = currentBox.previous;\n    }\n    return BoxesInOrder;\n}","export function aStar(grid, start, finish) {\n    const visitedBoxes = [];\n    grid[start.row][start.col].distance = 0;\n    const unvisitedBoxes = getAllBoxes(grid);\n    while (unvisitedBoxes.length !== 0) {\n        unvisitedBoxes.sort((a, b) => a.distance - b.distance);\n        let closestBox = unvisitedBoxes.shift();\n        if (closestBox.distance === Infinity) return visitedBoxes;\n\n\n        visitedBoxes.push(closestBox);\n        closestBox.visited = true;\n        if (closestBox === finish) return visitedBoxes;\n        grid = updateGrid(closestBox, grid, start, finish);\n    }\n}\n\nfunction updateGrid(box, grid, start, finish) {\n    const { col, row } = box;\n\n    if (row > 0 && !grid[row - 1][col].wall && !grid[row - 1][col].visited) {\n        grid[row - 1][col].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row - 1][col].previous = box;\n    }\n    if (row < grid.length - 1 && !grid[row + 1][col].wall && !grid[row + 1][col].visited) {\n        grid[row + 1][col].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row + 1][col].previous = box;\n    }\n    if (col > 0 && !grid[row][col - 1].wall && !grid[row][col - 1].visited) {\n        grid[row][col - 1].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row][col - 1].previous = box;\n    }\n    if (col < grid[0].length - 1 && !grid[row][col + 1].wall && !grid[row][col + 1].visited) {\n        grid[row][col + 1].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row][col + 1].previous = box;\n    }\n    return grid;\n\n}\n\nfunction hValue(box, finish) {\n    return 1.1 * Math.abs(box.row - finish.row) + Math.abs(box.col - finish.col);\n}\n\nfunction gValue(box, start) {\n    if (box.previous) {\n        box.moves = box.previous.moves + 1;\n        return box.previous.moves + 1;//+ (Math.abs(box.row - start.row) + Math.abs(box.col - start.col)) / 2;\n    }\n    box.moves = 0;\n    return 0;\n}\n\nfunction getAllBoxes(grid) {\n    let boxes = [];\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            boxes.push(grid[i][j]);\n        }\n    }\n    return boxes;\n}\n\nexport function shortestPath(finish) {\n    const BoxesInOrder = [];\n    let currentBox = finish;\n    while (currentBox !== null) {\n        currentBox.path = true;\n        BoxesInOrder.unshift(currentBox);\n        currentBox = currentBox.previous;\n    }\n    return BoxesInOrder;\n}","export function bfs(grid, start, finish) {\n    const visitedBoxes = [];\n    grid[start.row][start.col].distance = 0;\n    const unvisitedBoxes = getAllBoxes(grid);\n    while (unvisitedBoxes.length !== 0) {\n        unvisitedBoxes.sort((a, b) => a.distance - b.distance);\n        let closestBox = unvisitedBoxes.shift();\n        if (closestBox.distance === Infinity) return visitedBoxes;\n\n\n        visitedBoxes.push(closestBox);\n        closestBox.visited = true;\n        if (closestBox === finish) return visitedBoxes;\n        grid = updateGrid(closestBox, grid, start, finish);\n    }\n}\n\nfunction updateGrid(box, grid, start, finish) {\n    const { col, row } = box;\n\n    if (row > 0 && !grid[row - 1][col].wall && !grid[row - 1][col].visited) {\n        grid[row - 1][col].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row - 1][col].previous = box;\n    }\n    if (row < grid.length - 1 && !grid[row + 1][col].wall && !grid[row + 1][col].visited) {\n        grid[row + 1][col].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row + 1][col].previous = box;\n    }\n    if (col > 0 && !grid[row][col - 1].wall && !grid[row][col - 1].visited) {\n        grid[row][col - 1].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row][col - 1].previous = box;\n    }\n    if (col < grid[0].length - 1 && !grid[row][col + 1].wall && !grid[row][col + 1].visited) {\n        grid[row][col + 1].distance = hValue(box, finish) + gValue(box, finish);\n        grid[row][col + 1].previous = box;\n    }\n    return grid;\n\n}\n\nfunction hValue(box, finish) {\n    return Math.abs(box.row - finish.row) + Math.abs(box.col - finish.col);\n}\n\nfunction gValue(box, start) {\n    return Math.abs(box.row - start.row) + Math.abs(box.col - start.col);\n}\n\nfunction getAllBoxes(grid) {\n    let boxes = [];\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            boxes.push(grid[i][j]);\n        }\n    }\n    return boxes;\n}\n\nexport function shortestPath(finish) {\n    const BoxesInOrder = [];\n    let currentBox = finish;\n    while (currentBox !== null) {\n        currentBox.path = true;\n        BoxesInOrder.unshift(currentBox);\n        currentBox = currentBox.previous;\n    }\n    return BoxesInOrder;\n}","import React, { Component } from 'react';\nimport GridBox from './Grid/GridBox';\nimport { dijkstras, shortestPath } from './Algorithms/dijkstras'\nimport { aStar } from './Algorithms/aStar'\nimport { bfs } from './Algorithms/bfs'\n\n\nimport './Pathfinder.css';\n\nlet startRow = 10;\nlet startCol = 5;\nlet finishRow = 10;\nlet finishCol = 44;\nlet carryStart = false;\nlet carryFinish = false;\nlet running = false\n\n\nexport default class Pathfinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            clicking: false,\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ grid: getGrid() });\n    }\n\n    mouseDown(row, col) {\n        if (!running) {\n            this.setState({ clicking: true });\n            if (row === startRow && col === startCol) {\n                this.setState({ grid: clearVisited(this.state.grid) });\n                carryStart = true;\n                return;\n            }\n            if (row === finishRow && col === finishCol) {\n                this.setState({ grid: clearVisited(this.state.grid) });\n                carryFinish = true;\n                return;\n            }\n            this.setState({ grid: updateWall(this.state.grid, row, col) });\n        }\n    }\n\n    mouseEnter(row, col) {\n        if (this.state.clicking) {\n            if (carryStart) {\n                this.setState({ grid: updateStart(this.state.grid, row, col) });\n                this.setState({ grid: updateFinish(this.state.grid, finishRow, finishCol) });\n                return;\n            }\n            if (carryFinish) {\n                this.setState({ grid: updateFinish(this.state.grid, row, col) });\n                return;\n            }\n            this.setState({ grid: updateWall(this.state.grid, row, col) });\n        }\n    }\n\n    mouseUp() {\n        this.setState({ clicking: false });\n        carryStart = false;\n        carryFinish = false;\n    }\n\n    clearWalls() {\n        if (!running) {\n            this.setState({ grid: clearW(this.state.grid) });\n        }\n    }\n\n    clearPath() {\n        if (!running) {\n            this.setState({ grid: clearVisited(this.state.grid) });\n        }\n    }\n\n    visualize(algorithm) {\n        if (running) return;\n        running = true;\n        this.setState({ grid: clearVisited(this.state.grid) });\n        let boxesVisited;\n        if (algorithm === 'dijkstras') {\n            boxesVisited = dijkstras(this.state.grid, this.state.grid[startRow][startCol], this.state.grid[finishRow][finishCol]);\n        }\n        else if (algorithm === 'aSearch') {\n            boxesVisited = aStar(this.state.grid, this.state.grid[startRow][startCol], this.state.grid[finishRow][finishCol]);\n        }\n        else if (algorithm === 'bfs') {\n            boxesVisited = bfs(this.state.grid, this.state.grid[startRow][startCol], this.state.grid[finishRow][finishCol]);\n        }\n        console.log(boxesVisited.length);\n        for (let i = 1; i < boxesVisited.length - 1; i++) {\n            setTimeout(() => {\n                document.getElementById(`box:${boxesVisited[i].row},${boxesVisited[i].col}`).className = 'box visited';\n            }, 10 * i)\n            if (i === boxesVisited.length - 2) {\n                const path = shortestPath(this.state.grid[finishRow][finishCol]);\n                for (let j = 1; j < path.length - 1; j++) {\n                    setTimeout(() => {\n                        document.getElementById(`box:${path[j].row},${path[j].col}`).className = 'box path';\n                    }, boxesVisited.length * 10 + 30 * j)\n                }\n            }\n        }\n        setTimeout(() => {\n            running = false;\n        }, boxesVisited.length * 10 + 30 * shortestPath.length)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"header\">\n                    <div className=\"header-container\">\n                        <p>Pathfinding Algorithm Visualization</p>\n\n                        <button className=\"btn\" onClick={() => this.clearPath()}>\n                            Clear Path\n                        </button>\n                        <button className=\"btn\" onClick={() => this.clearWalls()}>\n                            Clear Walls\n                        </button>\n                        <button className=\"btn\" onClick={() => this.visualize('dijkstras')}>\n                            Visualize Dijkstras\n                        </button>\n                        <button className=\"btn\" onClick={() => this.visualize('aSearch')}>\n                            Visualize A* Search\n                        </button>\n                        <button className=\"btn\" onClick={() => this.visualize('bfs')}>\n                            Visualize Best-First-Search\n                        </button>\n                    </div>\n\n                </div>\n\n                <div className=\"grid-container\">\n                    <div className=\"grid\">\n                        {this.state.grid.map((row, rowIndex) => {\n                            return (\n                                <div key={rowIndex}>\n                                    {row.map((box, boxIndex) => {\n                                        const { row, col, finish, start, wall } = box;\n                                        return (\n                                            <GridBox\n                                                key={boxIndex}\n                                                row={row}\n                                                col={col}\n                                                start={start}\n                                                finish={finish}\n                                                wall={wall}\n                                                onMouseDown={() => this.mouseDown(row, col)}\n                                                onMouseEnter={() => this.mouseEnter(row, col)}\n                                                onMouseUp={() => this.mouseUp()}\n                                            ></GridBox>\n                                        );\n                                    }\n                                    )}\n                                </div>\n                            );\n                        }\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst getGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 30; row++) {\n        const currRow = [];\n        for (let col = 0; col < 50; col++) {\n            currRow.push(makeBox(col, row));\n        }\n        grid.push(currRow)\n    }\n    return grid;\n};\n\n\n\nconst makeBox = (col, row) => {\n    return {\n        col,\n        row,\n        start: row === startRow && col === startCol,\n        finish: row === finishRow && col === finishCol,\n        distance: Infinity,\n        previous: null,\n        wall: false,\n        visited: false,\n        path: false,\n        moves: Infinity,\n    };\n};\n\nconst updateWall = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[row][col].wall = !newGrid[row][col].wall;\n    return newGrid;\n};\n\nconst updateStart = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[startRow][startCol].start = false;\n    newGrid[row][col].start = true;\n    startRow = row;\n    startCol = col;\n    return newGrid;\n};\n\nconst updateFinish = (grid, row, col) => {\n    const newGrid = grid;\n    newGrid[finishRow][finishCol].finish = false;\n    newGrid[row][col].finish = true;\n    finishRow = row;\n    finishCol = col;\n    return newGrid;\n};\n\nconst clearW = (grid) => {\n    const newGrid = grid;\n    for (let row = 0; row < 30; row++) {\n        for (let col = 0; col < 50; col++) {\n            newGrid[row][col].wall = false;\n        }\n    }\n    return newGrid;\n}\n\nconst clearVisited = (grid) => {\n    const newGrid = grid;\n    for (let row = 0; row < 30; row++) {\n        for (let col = 0; col < 50; col++) {\n            newGrid[row][col].previous = null;\n            newGrid[row][col].distance = Infinity;\n            newGrid[row][col].visited = false;\n            newGrid[row][col].path = false;\n            newGrid[row][col].moves = Infinity;\n            if (document.getElementById(`box:${grid[row][col].row},${grid[row][col].col}`).className === 'box visited' || document.getElementById(`box:${grid[row][col].row},${grid[row][col].col}`).className === 'box path') {\n                document.getElementById(`box:${newGrid[row][col].row},${newGrid[row][col].col}`).className = 'box';\n            }\n\n        }\n    }\n    console.log(newGrid);\n    return newGrid;\n}\n\n","import './App.css';\nimport Pathfinder from './Pathfinder/Pathfinder'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Pathfinder />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}